{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\pi\\\\projet\\\\client\\\\src\\\\components\\\\util\\\\conversation\\\\Conversation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport './conversation.css';\nimport Message from './Messages/Message';\nimport { connect } from \"react-redux\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Conversation(props) {\n  _s();\n\n  const [message, setmessage] = useState('');\n  const [chats, setChats] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const to = useParams().to;\n  useEffect(() => {\n    {\n      //Get Request\n      (async () => {\n        try {\n          const response = await fetch('http://localhost:5000/api/conversation/fetchMessages/' + to, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            },\n            data: JSON.stringify({\n              user: props.userId\n            })\n          });\n\n          if (response.ok) {\n            const data = await response.json();\n            console.log(data);\n            setChats(data.chats);\n            setLoaded(true);\n          } else {\n            console.log('error');\n          }\n        } catch (error) {\n          console.log(error);\n        }\n\n        ;\n      })();\n    } //     try {   \n    //     const response = await fetch('http://localhost:5000/api/conversation/fetchMessages/'+to,\n    //     {\n    //         method:'GET',\n    //         headers:{\n    //             'Content-Type' : 'application/json',\n    //             'Accept' : 'application/json'\n    //         },\n    //         body:JSON.stringify({\n    //             user:props.userId\n    //         })\n    //     });\n    //     const responseData = await response.json();\n    //     console.log(responseData)\n    //     setChats(responseData.chats)\n    //     setLoaded(true)\n    // } catch (error) {\n    //     // setError(error)\n    //     //  setShow(true);\n    //     console.log(error)\n    // }\n    //     axios({\n    //   url: 'http://localhost:5000/api/conversation/fetchMessages/'+to,\n    //   method: 'Get',\n    // //    headers: { \"Content-Type\": \"application/json\",Authorization: 'hh'},\n    //    params:{\n    //     user:\"hhhhh\"\n    //   },\n    //  })\n    // .then(response => {\n    //     console.log(response.data)\n    //    setChats(response.data.chats)\n    //    setLoaded(true)\n    // }) \n    // .catch(err => {\n    //   console.log(err);\n    // })\n  }, []);\n\n  async function sendMessage(e) {\n    e.preventDefault();\n\n    try {\n      const response = await fetch('http://localhost:5000/api/conversation/send', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({\n          message: message,\n          to: to,\n          user: props.userId\n        })\n      });\n      const responseData = await response.json();\n      console.log(responseData);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container-fluid bg-light\",\n      id: \"chat\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content d-flex flex-column\",\n        id: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(Message, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Message, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Message, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tools form-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => {\n            setmessage(e.target.value);\n          },\n          id: \"newMessage\",\n          className: \"form-control col mr-2\",\n          type: \"text\",\n          name: \"\",\n          placeholder: \"Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          className: \"btn btn-primary \",\n          type: \"button\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"far fa-paper-plane\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Conversation, \"W5GJ2pUr7/JWWt3JONixv6d+HWI=\", false, function () {\n  return [useParams];\n});\n\n_c = Conversation;\n\nconst mapStateToProps = state => {\n  return {\n    userId: state.userId\n  };\n};\n\nexport default connect(mapStateToProps, null)(Conversation);\n\nvar _c;\n\n$RefreshReg$(_c, \"Conversation\");","map":{"version":3,"sources":["C:/Users/user/Desktop/pi/projet/client/src/components/util/conversation/Conversation.js"],"names":["React","useState","useEffect","useParams","Message","connect","axios","Conversation","props","message","setmessage","chats","setChats","loaded","setLoaded","to","response","fetch","method","headers","data","JSON","stringify","user","userId","ok","json","console","log","error","sendMessage","e","preventDefault","body","responseData","target","value","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAO,oBAAP;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAGA,SAASC,YAAT,CAAsBC,KAAtB,EAA4B;AAAA;;AAE5B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAOC,QAAP,IAAmBX,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACY,MAAD,EAAQC,SAAR,IAAmBb,QAAQ,CAAC,KAAD,CAAjC;AAIA,QAAMc,EAAE,GAAGZ,SAAS,GAAGY,EAAvB;AAGAb,EAAAA,SAAS,CAAC,MAAM;AAEb;AAAC;AACA,OAAC,YAAY;AACX,YAAI;AACF,gBAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,0DAAwDF,EAAzD,EAE5B;AACEG,YAAAA,MAAM,EAAC,KADT;AAEEC,YAAAA,OAAO,EAAC;AACJ,8BAAiB,kBADb;AAEJ,wBAAW;AAFP,aAFV;AAOEC,YAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAChBC,cAAAA,IAAI,EAACf,KAAK,CAACgB;AADK,aAAf;AAPP,WAF4B,CAA5B;;AAcE,cAAIR,QAAQ,CAACS,EAAb,EAAiB;AACf,kBAAML,IAAI,GAAG,MAAMJ,QAAQ,CAACU,IAAT,EAAnB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACAR,YAAAA,QAAQ,CAACQ,IAAI,CAACT,KAAN,CAAR;AACAG,YAAAA,SAAS,CAAC,IAAD,CAAT;AACH,WALC,MAKK;AACLa,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AACF,SAvBD,CAuBE,OAAOC,KAAP,EAAc;AACdF,UAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;;AACA;AACF,OA5BD;AA4BK,KA/BO,CAkChB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEC,GAjFQ,EAiFP,EAjFO,CAAT;;AAqFA,iBAAeC,WAAf,CAA2BC,CAA3B,EAA6B;AAEzBA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAI;AACF,YAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAAD,EAC5B;AACIC,QAAAA,MAAM,EAAC,MADX;AAEIC,QAAAA,OAAO,EAAC;AACJ,0BAAiB,kBADb;AAEJ,oBAAW;AAFP,SAFZ;AAOIc,QAAAA,IAAI,EAACZ,IAAI,CAACC,SAAL,CAAe;AAClBb,UAAAA,OAAO,EAACA,OADU;AAElBM,UAAAA,EAAE,EAACA,EAFe;AAGlBQ,UAAAA,IAAI,EAACf,KAAK,CAACgB;AAHO,SAAf;AAPT,OAD4B,CAA5B;AAeA,YAAMU,YAAY,GAAG,MAAMlB,QAAQ,CAACU,IAAT,EAA3B;AAEQC,MAAAA,OAAO,CAACC,GAAR,CAAYM,YAAZ;AAIL,KAtBL,CAsBM,OAAOL,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AAEH;AAEL;;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BAEI;AAAK,MAAA,SAAS,EAAC,0BAAf;AAA0C,MAAA,EAAE,EAAC,MAA7C;AAAA,8BACA;AAAK,QAAA,SAAS,EAAC,4BAAf;AAA4C,QAAA,EAAE,EAAC,cAA/C;AAAA,gCAEI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eASA;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACI;AAAO,UAAA,QAAQ,EAAGE,CAAD,IAAK;AAAErB,YAAAA,UAAU,CAACqB,CAAC,CAACI,MAAF,CAASC,KAAV,CAAV;AAA4B,WAApD;AAAsD,UAAA,EAAE,EAAC,YAAzD;AAAsE,UAAA,SAAS,EAAC,uBAAhF;AAAwG,UAAA,IAAI,EAAC,MAA7G;AAAoH,UAAA,IAAI,EAAC,EAAzH;AAA4H,UAAA,WAAW,EAAC;AAAxI;AAAA;AAAA;AAAA;AAAA,gBADJ,eAGI;AAAQ,UAAA,OAAO,EAAEN,WAAjB;AAA8B,UAAA,SAAS,EAAC,kBAAxC;AAA2D,UAAA,IAAI,EAAC,QAAhE;AAAA,iCACA;AAAG,YAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH;;GAxJQvB,Y;UAQEJ,S;;;KARFI,Y;;AA2JT,MAAM8B,eAAe,GAAGC,KAAK,IAAG;AAC9B,SAAO;AAELd,IAAAA,MAAM,EAAEc,KAAK,CAACd;AAFT,GAAP;AAID,CALD;;AAQA,eAAenB,OAAO,CAACgC,eAAD,EAAiB,IAAjB,CAAP,CAA8B9B,YAA9B,CAAf","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport { useParams } from 'react-router';\r\nimport './conversation.css';\r\nimport Message from './Messages/Message'\r\nimport { connect } from \"react-redux\";\r\nimport axios from 'axios'\r\n\r\n\r\nfunction Conversation(props){\r\n\r\nconst [message, setmessage] = useState('')\r\nconst [chats,setChats] = useState([]);\r\nconst [loaded,setLoaded]=useState(false);\r\n\r\n\r\n\r\nconst to = useParams().to;\r\n\r\n\r\nuseEffect(() => {\r\n\r\n   {//Get Request\r\n    (async () => { \r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/conversation/fetchMessages/'+to,\r\n        \r\n        {\r\n          method:'GET',\r\n          headers:{\r\n              'Content-Type' : 'application/json',\r\n              'Accept' : 'application/json'\r\n          \r\n          },\r\n          data:JSON.stringify({\r\n              user:props.userId\r\n          })\r\n      });\r\n\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            console.log(data)\r\n            setChats(data.chats)\r\n            setLoaded(true)\r\n        } else {\r\n          console.log('error')\r\n        }\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n       ;\r\n    })()}\r\n\r\n\r\n//     try {   \r\n//     const response = await fetch('http://localhost:5000/api/conversation/fetchMessages/'+to,\r\n//     {\r\n//         method:'GET',\r\n//         headers:{\r\n//             'Content-Type' : 'application/json',\r\n//             'Accept' : 'application/json'\r\n        \r\n//         },\r\n//         body:JSON.stringify({\r\n//             user:props.userId\r\n//         })\r\n//     });\r\n//     const responseData = await response.json();\r\n//     console.log(responseData)\r\n//     setChats(responseData.chats)\r\n//     setLoaded(true)\r\n\r\n// } catch (error) {\r\n//     // setError(error)\r\n//     //  setShow(true);\r\n\r\n//     console.log(error)\r\n   \r\n// }\r\n            \r\n//     axios({\r\n//   url: 'http://localhost:5000/api/conversation/fetchMessages/'+to,\r\n//   method: 'Get',\r\n\r\n// //    headers: { \"Content-Type\": \"application/json\",Authorization: 'hh'},\r\n//    params:{\r\n//     user:\"hhhhh\"\r\n//   },\r\n\r\n//  })\r\n// .then(response => {\r\n\r\n//     console.log(response.data)\r\n//    setChats(response.data.chats)\r\n//    setLoaded(true)\r\n   \r\n// }) \r\n// .catch(err => {\r\n//   console.log(err);\r\n// })\r\n\r\n},[]);\r\n\r\n\r\n\r\nasync function sendMessage(e){\r\n\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/conversation/send',\r\n      {\r\n          method:'POST',\r\n          headers:{\r\n              'Content-Type' : 'application/json',\r\n              'Accept' : 'application/json'\r\n          \r\n          },\r\n          body:JSON.stringify({\r\n            message:message,\r\n            to:to,\r\n            user:props.userId\r\n\r\n          })\r\n      });\r\n      const responseData = await response.json();\r\n  \r\n              console.log(responseData)\r\n              \r\n      \r\n        \r\n        } catch (error) {\r\n            console.log(error);\r\n            \r\n        }\r\n  \r\n   }\r\n\r\n    \r\n    return(\r\n        <div className=\"container\">\r\n\r\n            <div className=\"container-fluid bg-light\" id=\"chat\">\r\n            <div className=\"content d-flex flex-column\" id=\"chat-content\">\r\n\r\n                <Message/>\r\n                <Message/>\r\n                <Message/>\r\n   \r\n\r\n            </div>\r\n            <div className=\"tools form-row\">\r\n                <input onChange={(e)=>{ setmessage(e.target.value) }} id=\"newMessage\" className=\"form-control col mr-2\" type=\"text\" name=\"\" placeholder=\"Message\"  ></input>\r\n\r\n                <button onClick={sendMessage} className=\"btn btn-primary \" type=\"button\">\r\n                <i className=\"far fa-paper-plane\"></i>\r\n                </button>\r\n            </div>\r\n            </div>\r\n  </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state =>{\r\n  return {\r\n    \r\n    userId: state.userId,\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,null)(Conversation);  "]},"metadata":{},"sourceType":"module"}